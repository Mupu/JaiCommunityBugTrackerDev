name: 2_validate_PR_and_merge

on:
  pull_request_target:
    types: [synchronize, edited] # @todo remove edited

jobs:
  # The workflow file itself can be trusted, since its pull_request_target
  # Make sure the .github folder is not modified
  # Then validate 
  pr-validation:
    runs-on: [ubuntu-latest]
    outputs:
      validation_passed: ${{ steps.validate_pr_structure.outputs.validation_passed }}
      validated_commit_sha: ${{ steps.pr_safety_check.outputs.validated_commit_sha }}

    steps:
      - name: Check if '.github' folder was modified
        id: pr_safety_check
        uses: actions/github-script@v7
        with:
          script: |
            // Get PR data
            const { data: pr } = await github.rest.pulls.get({
              ...context.repo,
              pull_number: context.issue.number
            });

            const isSBOrBB = /^\[[SB]B\]:/.test(pr.title);
            if (!isSBOrBB) {
              console.log('This PR is not a SB or BB, ignoring it.');
              core.setOutput("run_validation", false);
              return;
            }

            const { data } = await github.rest.pulls.listFiles({
              ...context.repo,
              pull_number: context.issue.number,
              per_page: 100
            });
            console.log('data', data);

            console.log('pr.base.sha', pr.base.sha);
            console.log('pr.head.sha', pr.head.sha);
            const { data: comparison } = await github.rest.repos.compareCommits({
              ...context.repo,
              base: pr.base.sha,
              head: pr.head.sha
            });
            console.log('comparison', comparison);

            const { data: latestPr } = await github.rest.pulls.get({
              ...context.repo,
              pull_number: context.issue.number
            });

            if (latestPr.head.sha !== headSha) {
              console.error('PR head changed during processing. Aborting validation.');
              throw new Error('PR head changed during processing.');
            }
            throw new Error('xxxxxx')

            const filePaths = data.map(file => file.filename);

            // @todo pagination not supported yet
            if (filePaths.length >= 100) {
              await github.rest.issues.createComment({
                ...context.repo,
                issue_number: context.issue.number,
                body: `@Mupu, This PR has more than 100 files, please make this work and re-run the checks.`
              })
              throw new Error('This PR has more than 100 files, please make this work and re-run the checks.');
            }


            const existingLabelsResponse = await github.rest.issues.listLabelsOnIssue({
              ...context.repo,
              issue_number: context.issue.number,
            });
            const existingLabels = existingLabelsResponse.data.map((l) => l.name); 
            console.log('existingLabels', existingLabels);


            // Make sure .github folder is not modified
            if (filePaths.some(filePath => filePath.includes('.github'))) {
              await github.rest.issues.createComment({
                ...context.repo,
                issue_number: context.issue.number,
                body: `This PR has modified the .github folder, which is illegal!`
              })

              // Add labels to PR
              await github.rest.issues.setLabels({
                ...context.repo,
                issue_number: context.issue.number,
                labels: [...new Set([...existingLabels, 'validation-failed']) ],
              });
              throw new Error('This PR has modified the .github folder, which is illegal!');
            }

            await github.rest.issues.setLabels({
              ...context.repo,
              issue_number: context.issue.number,
              labels: [...existingLabels.filter((l) => l !== 'validation-failed') ],
            });

            // Pass on the exact sha of the commit
            const commitSha = pr.head.sha;
            console.log(`Validated Commit SHA: ${commitSha}`);
            core.setOutput('validated_commit_sha', commitSha);
            core.setOutput('run_validation', true);

      

      # This was triggered by pull_request_target it will checkout the base branch
      # by default. Therefore we can trust the js code that is run below.
      # Alternatively we could use the sha from above and checkout the PRs code.
      # That sounds worse though
      #
      # https://docs.github.com/en/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows#pull_request_target
      #
      # We need the js files
      - name: Checkout repository 
        uses: actions/checkout@v4

      - name: Validate PR Structure
        uses: actions/github-script@v7
        id: validate_pr_structure
        if: ${{ steps.pr_safety_check.outputs.run_validation == 'true' }}
        with:
          script: |
            const { validatePRStructure } = require('./.github/workflows/2_validate_PR_and_merge.js');
            // This will throw an error if the PR structure is invalid
            await validatePRStructure({ github, context });
            core.setOutput("validation_passed", true);



  validate-added-test-and-merge-pr:
    runs-on: [self-hosted]
    needs: pr-validation
    if: ${{ needs.pr-validation.outputs.validation_passed == 'true' }}
    # fif: github.event.pull_request.head.repo.fork == true || github.event.pull_request.user.type == 'Bot'

    # This is insecure because it (1) checks out the PRs code and (2) runs jai code from the PR which could be malicious
    # so we need to make sure it got approved
    # environment: test # @todo do we only wanna run this on forks?

    steps:
      - uses: actions/create-github-app-token@v1
        id: app_token
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      # Use GITHUB_TOKEN so we dont trigger a infinite loop
      # when updateing the PR

      # @todo potentially unsafe, the only reason we are using this is because
      # updating many files via the api is bad?
      # check again if maybe a folder is also just one call then we could checkout the base branch instead
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: ${{ needs.pr-validation.outputs.validated_commit_sha }}

      - name: Validate new Test and Merge Pull Request
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app_token.outputs.token }}
          script: |
            const { validateAddedTestAndMergeOnSuccess } = require('./.github/workflows/2_validate_PR_and_merge.js');
            await validateAddedTestAndMergeOnSuccess({ github, exec, io, contextRepo: context.repo, prNumber: context.issue.number });

      # # Not sure why the merge below only works after Checking out the PR again.
      # # If we dont do this, the merge will fail with 'Head branch is out of date'
      # # Use the app_token to checkout the PR, so we can trigger
      # # the push event when merging the PR
      # - name: Checkout Updated PR
      #   uses: actions/checkout@v4
      #   with:
      #     token: ${{ steps.app_token.outputs.token }}
      #     persist-credentials: false
      #     ref: ${{ github.event.pull_request.head.ref }}

      # - name: Merge PR
      #   uses: actions/github-script@v7
      #   with:
      #     github-token: ${{ steps.app_token.outputs.token }}
      #     script: |
      #       const mergeResponse = await github.rest.pulls.merge({
      #         ...context.repo,
      #         pull_number: context.issue.number,
      #         merge_method: 'squash'  // Use 'merge', 'squash', or 'rebase' depending on your needs
      #       });
