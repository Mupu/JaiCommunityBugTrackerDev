name: Handle Issue Comment

on:
  issue_comment:
    types: [created, edited]

# CHECK THAT COMMENT IS ON A ISSUE FROM BOT!

jobs:
  handle_issue_comment:
    runs-on: [self-hosted, windows]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Extract Command
      id: extract_commands
      uses: actions/github-script@v7
      with:
        script: |
          const commentId = context.payload.comment.id;
          const { data: comment } = await github.rest.issues.getComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            comment_id: commentId
          });
          core.setOutput('comment', comment);

          const containsEmailedIn = /!EmailedIn/i.test(comment.body); // Case-insensitive check for !EmailedIn
          core.setOutput('emailedIn', containsEmailedIn);
          
    
    - name: Handle !emailed
      if: ${{ steps.extract_commands.outputs.emailedIn }} == true
      uses: actions/github-script@v7
      with:
        script: |
          function parseIssueBody(issueBody) {
            // Split the input text into lines
            const lines = issueBody.split('\n');
            let pipeLines = lines.filter(line => line.startsWith('|'));
            // Discard the first two lines (header and table)
            pipeLines = pipeLines.slice(2);
            console.log(pipeLines);

            // Extract the row that contains the variable values
            const regex = /([^\|]*)/gm;
            const fields = [...pipeLines[0].matchAll(regex)].map(String);
            console.log(fields);

            // Define variable names
            const [testName, status, emailedIn, firstEncounter, firstEncounterVersion, lastEncountered, lastEncounteredVersion, fixDate, fixDateVersion] = fields;

            return {
                testName,
                status,
                emailedIn,
                firstEncounter,
                firstEncounterVersion,
                lastEncountered,
                lastEncounteredVersion,
                fixDate,
                fixDateVersion
            };
          }
          
          const { data: issue } = await github.rest.issues.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number
          });

          const parsedFields = parseIssueBody(issue.body);
          console.log("Res");
          console.log(parsedFields);
