# [ ] Create Label on Issue, PR, and test suit if not exist
# [ ] Add label on Issue/PR create
# [ ] Jai Version Task
# [ ] Update issue status on !Emailed
# issue name woher?
# 

# [ ] Auto run Testsuit on push
# [ ] (Auto run testsuit on approval of PR)
# [ ] Update issue on test results
# [ ] Update readme on test results

name: Create Issue on PR Merge

on:
  workflow_dispatch: # Manual trigger
  # push:
  #   branches:
  #     - master
  pull_request:
    types: [closed]

jobs:
  create_label_workflow:
    uses: ./.github/workflows/create_label.yml

  jai_version_workflow:
    uses: ./.github/workflows/jai_version.yml
    
  create_issue:
    runs-on: [self-hosted, windows]
    needs: [ create_label_workflow, jai_version_workflow]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Generate unique prefix for the new issue
      uses: actions/github-script@v7
      id: generate_prefix
      if: github.event_name == 'pull_request'
      with:
        script: |
          const issues = await github.paginate(github.rest.issues.listForRepo, {
            owner: context.repo.owner,
            repo: context.repo.repo,
            creator: 'github-actions'
          });

          console.log(issues);

          const datePrefix = new Date().toISOString().split('T')[0];
          let maxId = 0;
          
          issues.forEach(issue => {
            const match = issue.title.match(/(\d{4}-\d{2}-\d{2})-(\d{5})/);
            console.log(issue);
            if (match) {
              const id = parseInt(match[2], 10);
              if (id > maxId) {
                maxId = id;
              }
            }
          });

          const prefix = `${datePrefix}-${String(maxId + 1).padStart(5, '0')}`;
          console.log(prefix);
          core.setOutput('prefix', prefix);


    - name: Create a new issue
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          const currentJaiVersion = "${{ needs.jai_version_workflow.outputs.version }}";
          const prefix = "${{ steps.generate_prefix.outputs.prefix }}";
          const date = new Date().toISOString().split('T')[0];
          const prNumber = context.payload.pull_request.number;
          const prTitle = context.payload.pull_request.title;
          const prBody = context.payload.pull_request.body;

          const issueTitle = `${prefix}-${prTitle}`;
          const issueBody = `
          **Status:**
          
          | Test Name | Status | Emailed In | First Encounter | First Encounter Version | Last Encountered | Last Encountered Version | Fix Date | Fix Date Version |
          | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: |
          | EC1_polymorph_1.jai | Open | ‚ùå | ${date} | ${currentJaiVersion} | ${date} | ${currentJaiVersion} |  |  |
          `;

          const { data: issue } = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: issueTitle,
            body: issueBody
          });

          console.log(issue);

          await github.rest.issues.addLabels({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: issue.number,
            labels: [ currentJaiVersion ]
          });
          
