# [ ] cross platform support

# [~] Create Label on Issue, PR, and (??test suit??) if not exist
# [x] Add label on Issue/PR create
# [x] Jai Version Task
# [x] refactor to share js files
# [x] mention issue from PR
# [x] create message that further discussion are supposed to be held on issue
# [x] Update issue status on !Emailed
# [ ] parse !jonsaid
# [ ] issue name (clasification only) from PR name or classification dropdown?
# [ ] parse description
# [ ] parse and add not emailed tag
# [ ] jai dropdown and parsing of older version
# [ ] parse code snipped if single file
# [ ] PR and issue template (issue: i will make pr checkbox)

# [x] Auto run Testsuit on push
# [ ] create test result json
# [ ] run for past 3-5 jai versions
# [ ] Update issue on test results
#     [ ] change state, dates, labels
#     [ ] how to map name to issue number? maybe we DO need an id
# [ ] Update readme on test results
#     [ ] link issue number
#     [ ] foldable source code if single file, otherwise link
#     [ ] add 'new' section, if reported at compilerversion (could still bebroken backwards) 
#         or reopen compiler version (!= last encounter, maybe change that?)
#     [ ] column ordering?
#     [ ] recently fixed section (last 2 compiler versions?)
# [ ] (Auto run testsuit on approval of PR)

name: Create Issue on PR Merge

on:
  workflow_dispatch: # Manual trigger
  # push:
  #   branches:
  #     - master
  pull_request:
    types: [closed]

jobs:  
  create_issue:
    runs-on: [self-hosted, windows]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Create a new issue
      uses: actions/github-script@v7
      if: github.event.pull_request.merged == true
      with:
        script: |
          const get_jai_version = require('./.github/workflows/jai_version.js');
          
          const currentJaiVersion = await get_jai_version();
          const date = new Date().toISOString().split('T')[0];
          const prNumber = context.payload.pull_request.number;
          const prTitle = context.payload.pull_request.title;
          const prBody = context.payload.pull_request.body;

          const issueTitle = `${prTitle}`;
          const issueBody = `
          **Status:**
          
          | Test Name | Status | Emailed In | First Encounter | First Encounter Version | Last Encountered | Last Encountered Version | Fix Date | Fix Date Version |
          | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: |
          | EC1_polymorph_1.jai | Open | ‚ùå | ${date} | ${currentJaiVersion} | ${date} | ${currentJaiVersion} | - | - |
          `;

          // Create Issue
          const { data: issue } = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: issueTitle,
            body: issueBody
          });



          // Since recursive workflows are not triggered when using GITHUB_TOKEN 
          // we do it manually again.
          // https://github.com/peter-evans/create-pull-request/blob/main/docs/concepts-guidelines.md#triggering-further-workflow-runs

          // Add Current Compiler Label
          await github.rest.issues.addLabels({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: issue.number,
            labels: [ currentJaiVersion ]
          });

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `üëã Thanks for the contribution, please continue further discussion on this matter here: #${issue.html_url}!`
          })

          
